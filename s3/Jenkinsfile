import groovy.json.JsonOutput

//jenkins env variables
//env.jenkins_node_custom_workspace_path = "/var/jenkins_home/WorkSpace/Terraform-extension"

pipeline {
    agent any
    
    tools {
        terraform 'terraform-2'
    }
	
	parameters {
		string(name: 'environment', defaultValue: 'dev', description: 'Workspace/environment file to use for deployment')
		choice(name: 'workspace', defaultValue: 'dev',description: 'setting up workspace for terraform', choices: ['dev' , 'prod'])
    }
    
    environment {
        PATH = "${PATH}:${getTerraform()}"
    }

    stages {
		stage('Git Checkout') {
            steps { 
				echo pwd
				sh returnStatus: true, script: 'terraform workspace new dev '
				echo pwd 
                git credentialsId: '3bb8a15a-876c-4fcc-b31d-82a6e5cd6529', url: 'https://github.com/praveen-hub/AWS.git'
				echo pwd
            }
        }
        stage('TF Init') {
            steps {
				dir('s3/'){
				echo pwd
				//sh 'terraform workspace select ${environment}'
				sh returnStatus: true, script: 'terraform workspace new dev '
				echo pwd
                sh 'terraform init -input=false'
                echo pwd
                echo 'Terraform was initialised successfully'
				}
            }
        }
        stage('TF Format'){
            steps {
				dir('s3/'){
				//sh 'terraform workspace select ${environment}'
				sh returnStatus: true, script: 'terraform workspace new dev '
				sh "terraform fmt"
				}
                }
            }
		stage('TF Plan') {
            steps {
				dir('s3/'){
				//sh 'terraform workspace select ${environment}'
				sh returnStatus: true, script: 'terraform workspace new dev '
				echo pwd
				sh 'terraform plan --var-file=${params.workspace}.tfvars" -input=false -out tfplan'
				sh 'terraform show -no-color tfplan > tfplan.txt'
                echo 'Terraform plan was initialised successfully'
				}
            }
		}
		stage('TF Apply') {
            steps {
				dir('s3/'){
				//sh 'terraform workspace select ${environment}'
			    sh returnStatus: true, script: 'terraform workspace new dev '
                sh 'terraform apply --var-file=${params.workspace}.tfvars" --auto-approve -input=false tfplan'
                echo 'Terraform Applied successfully'
				}
            }
        }
    }
	post {
        always {
            archiveArtifacts artifacts: 'tfplan.txt'
        }
    }
}

def getTerraform(){
    def tfHome = tool name: 'terraform-2', type: 'terraform'
    return tfHome
}
